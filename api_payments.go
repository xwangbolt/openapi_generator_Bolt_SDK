/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// PaymentsApiService PaymentsApi service
type PaymentsApiService service

type ApiGuestPaymentsInitializeRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	xPublishableKey *string
	guestPaymentMethodInitializeRequest *GuestPaymentMethodInitializeRequest
}

// The publicly viewable identifier used to identify a merchant division.
func (r ApiGuestPaymentsInitializeRequest) XPublishableKey(xPublishableKey string) ApiGuestPaymentsInitializeRequest {
	r.xPublishableKey = &xPublishableKey
	return r
}

func (r ApiGuestPaymentsInitializeRequest) GuestPaymentMethodInitializeRequest(guestPaymentMethodInitializeRequest GuestPaymentMethodInitializeRequest) ApiGuestPaymentsInitializeRequest {
	r.guestPaymentMethodInitializeRequest = &guestPaymentMethodInitializeRequest
	return r
}

func (r ApiGuestPaymentsInitializeRequest) Execute() (*PaymentMethodInitializeResponse, *http.Response, error) {
	return r.ApiService.GuestPaymentsInitializeExecute(r)
}

/*
GuestPaymentsInitialize Initialize a Bolt payment for guest shoppers

Initialize a Bolt payment token that will be used to reference this payment to
Bolt when it is updated or finalized for guest shoppers.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGuestPaymentsInitializeRequest
*/
func (a *PaymentsApiService) GuestPaymentsInitialize(ctx context.Context) ApiGuestPaymentsInitializeRequest {
	return ApiGuestPaymentsInitializeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaymentMethodInitializeResponse
func (a *PaymentsApiService) GuestPaymentsInitializeExecute(r ApiGuestPaymentsInitializeRequest) (*PaymentMethodInitializeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentMethodInitializeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.GuestPaymentsInitialize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guest/payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xPublishableKey == nil {
		return localVarReturnValue, nil, reportError("xPublishableKey is required and must be specified")
	}
	if r.guestPaymentMethodInitializeRequest == nil {
		return localVarReturnValue, nil, reportError("guestPaymentMethodInitializeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Publishable-Key", r.xPublishableKey, "")
	// body params
	localVarPostBody = r.guestPaymentMethodInitializeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaymentsInitializeRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	xPublishableKey *string
	paymentMethodInitializeRequest *PaymentMethodInitializeRequest
}

// The publicly viewable identifier used to identify a merchant division.
func (r ApiPaymentsInitializeRequest) XPublishableKey(xPublishableKey string) ApiPaymentsInitializeRequest {
	r.xPublishableKey = &xPublishableKey
	return r
}

func (r ApiPaymentsInitializeRequest) PaymentMethodInitializeRequest(paymentMethodInitializeRequest PaymentMethodInitializeRequest) ApiPaymentsInitializeRequest {
	r.paymentMethodInitializeRequest = &paymentMethodInitializeRequest
	return r
}

func (r ApiPaymentsInitializeRequest) Execute() (*PaymentMethodInitializeResponse, *http.Response, error) {
	return r.ApiService.PaymentsInitializeExecute(r)
}

/*
PaymentsInitialize Initialize a Bolt payment for logged in shoppers

Initialize a Bolt payment token that will be used to reference this payment to
Bolt when it is updated or finalized for logged in shoppers.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaymentsInitializeRequest
*/
func (a *PaymentsApiService) PaymentsInitialize(ctx context.Context) ApiPaymentsInitializeRequest {
	return ApiPaymentsInitializeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaymentMethodInitializeResponse
func (a *PaymentsApiService) PaymentsInitializeExecute(r ApiPaymentsInitializeRequest) (*PaymentMethodInitializeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentMethodInitializeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.PaymentsInitialize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xPublishableKey == nil {
		return localVarReturnValue, nil, reportError("xPublishableKey is required and must be specified")
	}
	if r.paymentMethodInitializeRequest == nil {
		return localVarReturnValue, nil, reportError("paymentMethodInitializeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Publishable-Key", r.xPublishableKey, "")
	// body params
	localVarPostBody = r.paymentMethodInitializeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
