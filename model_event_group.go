/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventGroup{}

// EventGroup struct for EventGroup
type EventGroup struct {
	Tag string `json:".tag"`
	EventGroup string `json:"event_group"`
}

// NewEventGroup instantiates a new EventGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventGroup(tag string, eventGroup string) *EventGroup {
	this := EventGroup{}
	this.Tag = tag
	this.EventGroup = eventGroup
	return &this
}

// NewEventGroupWithDefaults instantiates a new EventGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventGroupWithDefaults() *EventGroup {
	this := EventGroup{}
	return &this
}

// GetTag returns the Tag field value
func (o *EventGroup) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *EventGroup) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *EventGroup) SetTag(v string) {
	o.Tag = v
}

// GetEventGroup returns the EventGroup field value
func (o *EventGroup) GetEventGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventGroup
}

// GetEventGroupOk returns a tuple with the EventGroup field value
// and a boolean to check if the value has been set.
func (o *EventGroup) GetEventGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventGroup, true
}

// SetEventGroup sets field value
func (o *EventGroup) SetEventGroup(v string) {
	o.EventGroup = v
}

func (o EventGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize[".tag"] = o.Tag
	toSerialize["event_group"] = o.EventGroup
	return toSerialize, nil
}

type NullableEventGroup struct {
	value *EventGroup
	isSet bool
}

func (v NullableEventGroup) Get() *EventGroup {
	return v.value
}

func (v *NullableEventGroup) Set(val *EventGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableEventGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableEventGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventGroup(val *EventGroup) *NullableEventGroup {
	return &NullableEventGroup{value: val, isSet: true}
}

func (v NullableEventGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


