/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentMethodInitializeRequestPaymentMethod - struct for PaymentMethodInitializeRequestPaymentMethod
type PaymentMethodInitializeRequestPaymentMethod struct {
	PaymentMethodSavedPaymentMethod *PaymentMethodSavedPaymentMethod
}

// PaymentMethodSavedPaymentMethodAsPaymentMethodInitializeRequestPaymentMethod is a convenience function that returns PaymentMethodSavedPaymentMethod wrapped in PaymentMethodInitializeRequestPaymentMethod
func PaymentMethodSavedPaymentMethodAsPaymentMethodInitializeRequestPaymentMethod(v *PaymentMethodSavedPaymentMethod) PaymentMethodInitializeRequestPaymentMethod {
	return PaymentMethodInitializeRequestPaymentMethod{
		PaymentMethodSavedPaymentMethod: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentMethodInitializeRequestPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PaymentMethodSavedPaymentMethod
	err = newStrictDecoder(data).Decode(&dst.PaymentMethodSavedPaymentMethod)
	if err == nil {
		jsonPaymentMethodSavedPaymentMethod, _ := json.Marshal(dst.PaymentMethodSavedPaymentMethod)
		if string(jsonPaymentMethodSavedPaymentMethod) == "{}" { // empty struct
			dst.PaymentMethodSavedPaymentMethod = nil
		} else {
			match++
		}
	} else {
		dst.PaymentMethodSavedPaymentMethod = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PaymentMethodSavedPaymentMethod = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PaymentMethodInitializeRequestPaymentMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PaymentMethodInitializeRequestPaymentMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentMethodInitializeRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.PaymentMethodSavedPaymentMethod != nil {
		return json.Marshal(&src.PaymentMethodSavedPaymentMethod)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentMethodInitializeRequestPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PaymentMethodSavedPaymentMethod != nil {
		return obj.PaymentMethodSavedPaymentMethod
	}

	// all schemas are nil
	return nil
}

type NullablePaymentMethodInitializeRequestPaymentMethod struct {
	value *PaymentMethodInitializeRequestPaymentMethod
	isSet bool
}

func (v NullablePaymentMethodInitializeRequestPaymentMethod) Get() *PaymentMethodInitializeRequestPaymentMethod {
	return v.value
}

func (v *NullablePaymentMethodInitializeRequestPaymentMethod) Set(val *PaymentMethodInitializeRequestPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodInitializeRequestPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodInitializeRequestPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodInitializeRequestPaymentMethod(val *PaymentMethodInitializeRequestPaymentMethod) *NullablePaymentMethodInitializeRequestPaymentMethod {
	return &NullablePaymentMethodInitializeRequestPaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethodInitializeRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodInitializeRequestPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


