/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddressReference - struct for AddressReference
type AddressReference struct {
	AddressReferenceExplicit *AddressReferenceExplicit
	AddressReferenceId *AddressReferenceId
}

// AddressReferenceExplicitAsAddressReference is a convenience function that returns AddressReferenceExplicit wrapped in AddressReference
func AddressReferenceExplicitAsAddressReference(v *AddressReferenceExplicit) AddressReference {
	return AddressReference{
		AddressReferenceExplicit: v,
	}
}

// AddressReferenceIdAsAddressReference is a convenience function that returns AddressReferenceId wrapped in AddressReference
func AddressReferenceIdAsAddressReference(v *AddressReferenceId) AddressReference {
	return AddressReference{
		AddressReferenceId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddressReference) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddressReferenceExplicit
	err = newStrictDecoder(data).Decode(&dst.AddressReferenceExplicit)
	if err == nil {
		jsonAddressReferenceExplicit, _ := json.Marshal(dst.AddressReferenceExplicit)
		if string(jsonAddressReferenceExplicit) == "{}" { // empty struct
			dst.AddressReferenceExplicit = nil
		} else {
			match++
		}
	} else {
		dst.AddressReferenceExplicit = nil
	}

	// try to unmarshal data into AddressReferenceId
	err = newStrictDecoder(data).Decode(&dst.AddressReferenceId)
	if err == nil {
		jsonAddressReferenceId, _ := json.Marshal(dst.AddressReferenceId)
		if string(jsonAddressReferenceId) == "{}" { // empty struct
			dst.AddressReferenceId = nil
		} else {
			match++
		}
	} else {
		dst.AddressReferenceId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddressReferenceExplicit = nil
		dst.AddressReferenceId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddressReference)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddressReference)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddressReference) MarshalJSON() ([]byte, error) {
	if src.AddressReferenceExplicit != nil {
		return json.Marshal(&src.AddressReferenceExplicit)
	}

	if src.AddressReferenceId != nil {
		return json.Marshal(&src.AddressReferenceId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddressReference) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddressReferenceExplicit != nil {
		return obj.AddressReferenceExplicit
	}

	if obj.AddressReferenceId != nil {
		return obj.AddressReferenceId
	}

	// all schemas are nil
	return nil
}

type NullableAddressReference struct {
	value *AddressReference
	isSet bool
}

func (v NullableAddressReference) Get() *AddressReference {
	return v.value
}

func (v *NullableAddressReference) Set(val *AddressReference) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressReference) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressReference(val *AddressReference) *NullableAddressReference {
	return &NullableAddressReference{value: val, isSet: true}
}

func (v NullableAddressReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


