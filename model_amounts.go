/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Amounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Amounts{}

// Amounts struct for Amounts
type Amounts struct {
	// The total amount, in cents, including its items and taxes (if applicable).
	Total int64 `json:"total"`
	Currency string `json:"currency"`
	// The total tax amount, in cents for all of the items associated with the cart.
	Tax *int64 `json:"tax,omitempty"`
}

// NewAmounts instantiates a new Amounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmounts(total int64, currency string) *Amounts {
	this := Amounts{}
	this.Total = total
	this.Currency = currency
	return &this
}

// NewAmountsWithDefaults instantiates a new Amounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountsWithDefaults() *Amounts {
	this := Amounts{}
	return &this
}

// GetTotal returns the Total field value
func (o *Amounts) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Amounts) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Amounts) SetTotal(v int64) {
	o.Total = v
}

// GetCurrency returns the Currency field value
func (o *Amounts) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Amounts) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Amounts) SetCurrency(v string) {
	o.Currency = v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *Amounts) GetTax() int64 {
	if o == nil || IsNil(o.Tax) {
		var ret int64
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Amounts) GetTaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *Amounts) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given int64 and assigns it to the Tax field.
func (o *Amounts) SetTax(v int64) {
	o.Tax = &v
}

func (o Amounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Amounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	return toSerialize, nil
}

type NullableAmounts struct {
	value *Amounts
	isSet bool
}

func (v NullableAmounts) Get() *Amounts {
	return v.value
}

func (v *NullableAmounts) Set(val *Amounts) {
	v.value = val
	v.isSet = true
}

func (v NullableAmounts) IsSet() bool {
	return v.isSet
}

func (v *NullableAmounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmounts(val *Amounts) *NullableAmounts {
	return &NullableAmounts{value: val, isSet: true}
}

func (v NullableAmounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


