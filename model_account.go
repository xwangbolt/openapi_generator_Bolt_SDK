/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	Addresses []AddressListing `json:"addresses"`
	PaymentMethods []PaymentMethod `json:"payment_methods"`
	Profile *Profile `json:"profile,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(addresses []AddressListing, paymentMethods []PaymentMethod) *Account {
	this := Account{}
	this.Addresses = addresses
	this.PaymentMethods = paymentMethods
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *Account) GetAddresses() []AddressListing {
	if o == nil {
		var ret []AddressListing
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *Account) GetAddressesOk() ([]AddressListing, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *Account) SetAddresses(v []AddressListing) {
	o.Addresses = v
}

// GetPaymentMethods returns the PaymentMethods field value
func (o *Account) GetPaymentMethods() []PaymentMethod {
	if o == nil {
		var ret []PaymentMethod
		return ret
	}

	return o.PaymentMethods
}

// GetPaymentMethodsOk returns a tuple with the PaymentMethods field value
// and a boolean to check if the value has been set.
func (o *Account) GetPaymentMethodsOk() ([]PaymentMethod, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentMethods, true
}

// SetPaymentMethods sets field value
func (o *Account) SetPaymentMethods(v []PaymentMethod) {
	o.PaymentMethods = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *Account) GetProfile() Profile {
	if o == nil || IsNil(o.Profile) {
		var ret Profile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetProfileOk() (*Profile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *Account) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given Profile and assigns it to the Profile field.
func (o *Account) SetProfile(v Profile) {
	o.Profile = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addresses"] = o.Addresses
	toSerialize["payment_methods"] = o.PaymentMethods
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


