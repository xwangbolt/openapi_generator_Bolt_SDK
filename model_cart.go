/*
Bolt API Reference

A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.

API version: 3.0.1
Contact: api-help@bolt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cart{}

// Cart struct for Cart
type Cart struct {
	Amounts Amounts `json:"amounts"`
	// This value is used by Bolt as an external reference to a given order. This reference must be unique per successful transaction.
	OrderReference string `json:"order_reference"`
	// Used optionally to pass additional information like order numbers or other IDs as needed.
	OrderDescription *string `json:"order_description,omitempty"`
	// This field corresponds to the merchant's order reference associated with this Bolt transaction.
	DisplayId *string `json:"display_id,omitempty"`
	Shipments []CartShipment `json:"shipments,omitempty"`
	Discounts []CartDiscount `json:"discounts,omitempty"`
	Items []CartItem `json:"items,omitempty"`
}

// NewCart instantiates a new Cart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCart(amounts Amounts, orderReference string) *Cart {
	this := Cart{}
	this.Amounts = amounts
	this.OrderReference = orderReference
	return &this
}

// NewCartWithDefaults instantiates a new Cart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartWithDefaults() *Cart {
	this := Cart{}
	return &this
}

// GetAmounts returns the Amounts field value
func (o *Cart) GetAmounts() Amounts {
	if o == nil {
		var ret Amounts
		return ret
	}

	return o.Amounts
}

// GetAmountsOk returns a tuple with the Amounts field value
// and a boolean to check if the value has been set.
func (o *Cart) GetAmountsOk() (*Amounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amounts, true
}

// SetAmounts sets field value
func (o *Cart) SetAmounts(v Amounts) {
	o.Amounts = v
}

// GetOrderReference returns the OrderReference field value
func (o *Cart) GetOrderReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderReference
}

// GetOrderReferenceOk returns a tuple with the OrderReference field value
// and a boolean to check if the value has been set.
func (o *Cart) GetOrderReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderReference, true
}

// SetOrderReference sets field value
func (o *Cart) SetOrderReference(v string) {
	o.OrderReference = v
}

// GetOrderDescription returns the OrderDescription field value if set, zero value otherwise.
func (o *Cart) GetOrderDescription() string {
	if o == nil || IsNil(o.OrderDescription) {
		var ret string
		return ret
	}
	return *o.OrderDescription
}

// GetOrderDescriptionOk returns a tuple with the OrderDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetOrderDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.OrderDescription) {
		return nil, false
	}
	return o.OrderDescription, true
}

// HasOrderDescription returns a boolean if a field has been set.
func (o *Cart) HasOrderDescription() bool {
	if o != nil && !IsNil(o.OrderDescription) {
		return true
	}

	return false
}

// SetOrderDescription gets a reference to the given string and assigns it to the OrderDescription field.
func (o *Cart) SetOrderDescription(v string) {
	o.OrderDescription = &v
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *Cart) GetDisplayId() string {
	if o == nil || IsNil(o.DisplayId) {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetDisplayIdOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayId) {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *Cart) HasDisplayId() bool {
	if o != nil && !IsNil(o.DisplayId) {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *Cart) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetShipments returns the Shipments field value if set, zero value otherwise.
func (o *Cart) GetShipments() []CartShipment {
	if o == nil || IsNil(o.Shipments) {
		var ret []CartShipment
		return ret
	}
	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetShipmentsOk() ([]CartShipment, bool) {
	if o == nil || IsNil(o.Shipments) {
		return nil, false
	}
	return o.Shipments, true
}

// HasShipments returns a boolean if a field has been set.
func (o *Cart) HasShipments() bool {
	if o != nil && !IsNil(o.Shipments) {
		return true
	}

	return false
}

// SetShipments gets a reference to the given []CartShipment and assigns it to the Shipments field.
func (o *Cart) SetShipments(v []CartShipment) {
	o.Shipments = v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *Cart) GetDiscounts() []CartDiscount {
	if o == nil || IsNil(o.Discounts) {
		var ret []CartDiscount
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetDiscountsOk() ([]CartDiscount, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *Cart) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []CartDiscount and assigns it to the Discounts field.
func (o *Cart) SetDiscounts(v []CartDiscount) {
	o.Discounts = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Cart) GetItems() []CartItem {
	if o == nil || IsNil(o.Items) {
		var ret []CartItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetItemsOk() ([]CartItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Cart) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []CartItem and assigns it to the Items field.
func (o *Cart) SetItems(v []CartItem) {
	o.Items = v
}

func (o Cart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amounts"] = o.Amounts
	toSerialize["order_reference"] = o.OrderReference
	if !IsNil(o.OrderDescription) {
		toSerialize["order_description"] = o.OrderDescription
	}
	if !IsNil(o.DisplayId) {
		toSerialize["display_id"] = o.DisplayId
	}
	if !IsNil(o.Shipments) {
		toSerialize["shipments"] = o.Shipments
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableCart struct {
	value *Cart
	isSet bool
}

func (v NullableCart) Get() *Cart {
	return v.value
}

func (v *NullableCart) Set(val *Cart) {
	v.value = val
	v.isSet = true
}

func (v NullableCart) IsSet() bool {
	return v.isSet
}

func (v *NullableCart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCart(val *Cart) *NullableCart {
	return &NullableCart{value: val, isSet: true}
}

func (v NullableCart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


